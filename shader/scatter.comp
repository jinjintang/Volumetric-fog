#version 450
layout (local_size_x = 16, local_size_y = 16,local_size_z = 1) in;
layout (binding = 0, rgba8) uniform writeonly image3D _VolumeScatter;
layout (binding = 1, rgba8) uniform readonly image3D _VolumeInject;

#define VOLUME_DEPTH 128
vec4 ScatterStep(vec3 accumulatedLight, float accumulatedTransmittance, vec3 sliceLight, float sliceDensity)
{
	sliceDensity = max(sliceDensity, 0.000001);
	float  sliceTransmittance = exp(-sliceDensity / VOLUME_DEPTH);

	
	vec3 sliceLightIntegral = sliceLight * (1.0 - sliceTransmittance) / sliceDensity;

	accumulatedLight += sliceLightIntegral * accumulatedTransmittance;
	accumulatedTransmittance *= sliceTransmittance;
	
	return vec4(accumulatedLight, accumulatedTransmittance);
}


void main()
{
	// Store transmission in .a, as opposed to density in _VolumeInject
	vec4 accum = vec4(0, 0, 0, 1);
	ivec3 pos = ivec3(gl_GlobalInvocationID.xy, 0);
	int steps = VOLUME_DEPTH;

	for(int z = 0; z < steps; z++)
	{
		pos.z = z;
		
		vec4 slice =imageLoad(_VolumeInject, pos);
		accum =ScatterStep(accum.rgb, accum.a, slice.rgb, slice.a);
	
		imageStore(_VolumeScatter, ivec3(pos), accum);
	}
}