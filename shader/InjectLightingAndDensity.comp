#version 450
layout (local_size_x = 16, local_size_y =16,local_size_z = 1) in;
layout (binding = 0, rgba8) uniform writeonly image3D _VolumeInject;
layout (binding = 1) uniform sampler2D shadowMap;
layout (binding = 2) uniform UBOCompute {							
			vec4 _FrustumRays[4];
			vec4 _CameraPos;
			vec4 _FogParams;
			vec3 _AmbientLight;
			float _Density;
			vec3 _DirLightColor;
			float _Intensity;
			vec3 _DirLightDir;
			float _Anisotropy;
			float _NearOverFarClip;
			float _Time;
		} ubocompute;

layout (binding = 3) uniform UBO 
{
	mat4 projection;
	mat4 view;
	mat4 model;
	mat4 lightSpace;
	vec3 lightPos;
} ubo;

struct PointLight
{
	vec3 pos ;
	float range;
	vec3 color;
	float padding;
}pointlight;




const mat4 biasMat = mat4( 
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.5, 0.5, 0.0, 1.0 );

#define enablePCF 1.0

float hash( float n ) { return fract(sin(n)*753.5453123); }
float noisep(vec3 x)
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
	
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}

float ScrollNoise(vec3 pos, float speed, float scale, vec3 dir, float amount, float bias, float mult )
{
	float time = ubocompute._Time * speed;
	float noiseScale = scale;
	vec3 noiseScroll = dir * time;
	vec3 q = pos - noiseScroll;
	q *= scale;
	float f = 0;
	f = 0.5 * noisep(q);
	// scroll the next octave in the opposite direction to get some morphing instead of just scrolling
	q += noiseScroll * scale;
	q = q * 2.01;
	f += 0.25 * noisep(q);

	f += bias;
	f *= mult;

	f = max(f, 0.0);
	return mix(1.0, f, amount);
}
float Density(in vec3 pos)
{
	float fog = ubocompute._FogParams.x;

	//fog += max(exp(ubocompute._FogParams.y*(-pos.y + ubocompute._FogParams.z)) * ubocompute._FogParams.w, 0.0);

	vec3 warp = pos;

	fog *= ScrollNoise(warp, 10, 1.5, vec3(1,0,0), 1, -0.3, 8.0);

	return max(fog * ubocompute._Density, 0.0);
	
}



vec3 FrustumRay(in vec2 uv, in vec4 frustumRays[4])
{
	vec3 ray0 = mix(frustumRays[0].xyz, frustumRays[1].xyz, uv.x);
	vec3 ray1 = mix(frustumRays[3].xyz, frustumRays[2].xyz, uv.x);
	return mix(ray0, ray1, uv.y);
}

float anisotropy(in float costheta)
{
	float g = ubocompute._Anisotropy;
	float gsq = g*g;
	float denom = 1 + gsq - 2.0 * g * costheta;
	denom = denom * denom * denom;
	denom = sqrt(max(0, denom)); 
	return (1 - gsq) / denom;
}

float textureProj(vec4 shadowCoord, vec2 off)
{
	float shadow = 1.0;
	if ( shadowCoord.z > -1.0 && shadowCoord.z < 1.0 ) 
	{
		float dist = texture( shadowMap, shadowCoord.st + off ).r;
		if ( shadowCoord.w > 0.0 && dist < shadowCoord.z ) 
		{
			shadow = 0;
		}
	}
	return shadow;
}

float filterPCF(vec4 sc)
{
	ivec2 texDim = textureSize(shadowMap, 0);
	float scale = 1.5;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	int range = 1;
	
	for (int x = -range; x <= range; x++)
	{
		for (int y = -range; y <= range; y++)
		{
			shadowFactor += textureProj(sc, vec2(dx*x, dy*y));
			count++;
		}
	
	}
	return shadowFactor / count;
}
vec3 DirectionalLight(in vec3 pos)
{

	float att = 1;
	
	vec4 ShadowCoord =( biasMat * ubo.lightSpace) * vec4(pos, 1.0);	
	float shadow = (enablePCF == 1) ? filterPCF(ShadowCoord / ShadowCoord.w) : textureProj(ShadowCoord / ShadowCoord.w, vec2(0.0));



	vec3 posToCamera = normalize(ubocompute._CameraPos.xyz - pos);
	float costheta = dot(posToCamera, ubocompute._DirLightDir);
	att *= anisotropy(costheta);


	return ubocompute._DirLightColor*shadow*att;
}

float Attenuation(float distSqr)
	{
		float d = sqrt(distSqr);
		float kDefaultPointLightRadius = 0.25;
		return 1.0 / pow(1.0 +   d/kDefaultPointLightRadius, 2);
	}
vec3 PointLights(vec3 pos)
{
	pointlight.pos=vec3(0,0,60);
	pointlight.range=10;
	pointlight.color=vec3(1.0,1.0,0.0);
	pointlight.padding=1;

	vec3 color = vec3(0);
	
		vec3 posToLight = pointlight.pos - pos;
		float distNorm = sqrt(dot(posToLight, posToLight));
		
		float att = 1.0;

		
		vec3 cameraToPos = normalize(pos - ubocompute._CameraPos.xyz);
		float costheta = dot(cameraToPos, normalize(posToLight));
		att *= anisotropy(costheta);
		return vec3(1,1,0)*(1-Attenuation(distNorm) );//*att*10;

		color += pointlight.color * att;
	
	return color;
}
void main()
{   

    vec3 color = vec3(0);//ubocompute._AmbientLight;
	
	vec2 uv = vec2(float(gl_GlobalInvocationID.x)/512.0, float(gl_GlobalInvocationID.y)/512.0);
	float z = float(gl_GlobalInvocationID.z)/128.0;
	z = ubocompute._NearOverFarClip + z * (1 - ubocompute._NearOverFarClip);
	vec4 _FrustumRays[4]={
	vec4(-327,-147,256,0),
	vec4(327,-147,256,0),
	vec4(-327,147,256,0),
	vec4(327,147,256,0)

	};
	vec3 pos = FrustumRay(uv, ubocompute._FrustumRays)/256.0*gl_GlobalInvocationID.z + ubocompute._CameraPos.xyz;



   color += DirectionalLight(pos);


	// Density
	float density = Density(pos);

	
	// Output
	vec4 output1;
	output1.rgb = color;
	output1.a =density;
	imageStore(_VolumeInject, ivec3(gl_GlobalInvocationID),output1);
	

	
}

